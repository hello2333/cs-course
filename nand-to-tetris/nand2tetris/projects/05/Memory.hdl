// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, addressM[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    // V1
    // RAM16K(in=in , load=load , address=address[0..13], out=RAM16K_OUT );
    // RAM4K(in=in , load=load , address=address[0..11] , out=RAM4K_OUT1 );
    // RAM4K(in=in , load=load , address=address[0..11] , out=RAM4K_OUT2 );
    // Mux16(a=RAM4K_OUT1 , b=RAM4K_OUT2 , sel=address[12] , out=SCREEN_OUT );
    // Register(in=in , load=load , out=KEY_OUT );
    // Mux16(a=SCREEN_OUT , b=KEY_OUT , sel=address[13], out=DEVICE_OUT );
    // Mux16(a=RAM16K_OUT , b=DEVICE_OUT , sel=address[14] , out=out );  

    // V2
    // DMux(in=load , sel=addressM[14] , a=load_ram , b=load_device );
    // DMux(in=load_device , sel=addressM[13] , a=load_screen , b=load_key );
    // DMux(in=load_screen , sel=addressM[12] , a=load_screen_part1 , b=load_screen_part2 );
    // RAM16K(in=in , load=load_ram , address=addressM[0..13] , out=out_ram );
    // RAM4K(in=in , load=load_screen_part1 , address=addressM[0..11] , out=out_screen_part1 );
    // RAM4K(in=in , load=load_screen_part2 , address=addressM[0..11] , out=out_screen_part2 );
    // Register(in=in , load=load_key , out=out_key );
    // Mux16(a=out_screen_part1 , b=out_screen_part2 , sel=addressM[12] , out=out_screen );
    // Mux16(a=out_screen , b=out_key , sel=addressM[13] , out=out_device );
    // Mux16(a=out_ram , b=out_device , sel=addressM[14] , out=out );

    // V3
    DMux(in=load , sel=address[14] , a=load_ram , b=load_device );
    DMux(in=load_device , sel=address[13] , a=load_screen , b=load_key );
    
    RAM16K(in=in , load=load_ram , address=address[0..13] , out=out_ram );
    Screen(in=in , load=load_screen , address=address[0..12] , out=out_screen );
    Keyboard(out=out_key );

    Mux16(a=out_screen , b=out_key , sel=address[13] , out=out_device );
    Mux16(a=out_ram , b=out_device , sel=address[14] , out=out );
}